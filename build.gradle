// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.5"
}

buildscript {
    final byte verMajor  = 1
    final byte verMiddle = 4
    final byte verMinor  = 38

    if (verMiddle >= 100 || verMinor >= 10_000) {
        throw new IllegalStateException("Middle and Minor version value is allowed under 100.")
    }

    ext.versionCodeValue = ((verMajor * 1_000_000) + (verMiddle * 10_000) + verMinor)
    ext.versionNameValue = "${verMajor}.${verMiddle}.${verMinor}"

    ext.compileSdk = 30
    ext.targetSdk = 30
    ext.buildTools = "30.0.0"

    ext.kotlin_version = '1.4.10'

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' } // For crashlytics
        maven { url "https://plugins.gradle.org/m2/" } // For Play publisher plugin
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath 'com.google.gms:google-services:4.2.0'
        classpath 'com.github.triplet.gradle:play-publisher:2.2.0'
        classpath 'com.google.android.gms:oss-licenses-plugin:0.9.5'
        classpath 'io.fabric.tools:gradle:1.28.0'
    }

    ext.libVersions = [
            coroutines: '1.3.5',
            ktx: '1.1.0',
            appcompat: '1.2.0',
            cardview: '1.0.0',
            constraintlayout: '2.0.2',
            lifecycle: '2.2.0',
            room: '2.3.0-alpha02',
            paging: '3.0.0-alpha03',
            material: '1.2.0',
            fragment: '1.2.4',
            timber: '4.6.0',
            junit: '4.12',
            robolectric: '4.2.1',
            mockk: '1.9.3',
            coroutines_test: '1.3.5'
    ]
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" } // For PhotoView
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task mergeJacocoFiles(
    type: JacocoMerge,
    group: "verification"
) {
    gradle.afterProject { project, _ ->
        if (project.rootProject != project && project.plugins.hasPlugin('jacoco')) {
            executionData "${project.buildDir}/jacoco/testDebugUnitTest.exec"
        }
    }
}

task jacocoMergedTestReport(
    type: JacocoReport,
    dependsOn: [tasks.mergeJacocoFiles],
    group: "verification"
) {
    getExecutionData().from = mergeJacocoFiles.destinationFile

    gradle.afterProject { project, _ ->
        if (project.rootProject != project && project.plugins.hasPlugin('jacoco')) {
            getSourceDirectories().from += "${project.projectDir}/src/main/java"
            getClassDirectories().from += project.fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug")
        }
    }
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
